cmake_minimum_required(VERSION 3.2)
project(nativeoperations)
set( CMAKE_VERBOSE_MAKEFILE on )
option(TESTS "Compile and make tests for the code?" ON)
option(PTX "Compile ptx" OFF)
option(CUBIN "Compile cubin" OFF)
option(ECLIPSE "Generate eclipse files" OFF)
set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake" ${CMAKE_MODULE_PATH})

find_path(STDIO_INCLUDE_PATH stdio.h)
# packages
find_package(CUDA)
set(CMAKE_CXX_FLAGS "-Wall -O0 -fopenmp -std=c++11 -ftree-vectorize -msse2 -ftree-vectorizer-verbose=0 -fassociative-math -funsafe-math-optimizations -march=native")
IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    include_directories("/usr/include")
    include_directories("/usr/local/include")
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

#used for determining if we should include jni components or not
find_package(Java COMPONENTS Development)
if(Java_FOUND)
    if(EXISTS "$ENV{JAVA_HOME}")
        message("INCLUDING JAVA $ENV{JAVA_HOME}include")
        include_directories("$ENV{JAVA_HOME}include" "$ENV{JAVA_HOME}include/linux")

        add_definitions(-D__JNI__=true)

    else()
        message(FATAL_ERROR "Could not find JAVA_HOME environment variable")
    endif(EXISTS "$ENV{JAVA_HOME}")
endif()

FIND_PACKAGE(BLAS)
FIND_PACKAGE(LAPACK)


if (CUDA_FOUND)
    message("CUDA found!")
    set( CUDA_ARCHITECTURE_MINIMUM "3.0" CACHE STRING "Minimum required CUDA compute capability" )
    SET(CUDA_VERBOSE_BUILD ON)
    SET(CUDA_SEPARABLE_COMPILATION OFF)
    set(CUDA_COMPUTE_CAPABILITY "30")
    list(APPEND CUDA_NVCC_FLAGS "-DVERBOSE;-lCppUTest;-G;-g;-gencode arch=compute_30,code=sm_30")
endif()


include_directories(include)
add_subdirectory(src)

if(ECLIPSE)
    message("ADDING ECLIPSE")
    add_subdirectory(eclipse)
endif()
if(PTX)
    message("ADDING PTX")
    add_subdirectory(ptx)
endif()
if(CUBIN)
    message("ADDING CUBIN")
    add_subdirectory(cubin)
endif()
if(RUN_TEST)
    message("ADDING TEST")
    add_subdirectory(test)
endif()