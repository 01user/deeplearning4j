{"paragraphs":[{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524818351336_1698955097","id":"20180427-083911_1128930448","dateCreated":"2018-04-27T08:39:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:486","text":"%md\n### Note\n\nPlease view the [README](https://github.com/deeplearning4j/deeplearning4j/tree/master/dl4j-examples/tutorials/README.md) to learn about installing, setting up dependencies, and importing notebooks in Zeppelin","dateUpdated":"2018-04-27T08:41:32+0000","dateFinished":"2018-04-27T08:41:32+0000","dateStarted":"2018-04-27T08:41:32+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Note</h3>\n<p>Please view the <a href=\"https://github.com/deeplearning4j/deeplearning4j/tree/master/dl4j-examples/tutorials/README.md\">README</a> to learn about installing, setting up dependencies, and importing notebooks in Zeppelin</p>\n"}]}},{"text":"%md\n\n### Background\n\nIn this tutorial we will use a LSTM neural network to predict instacart users' purchasing behavior given a history of their past orders. The data originially comes from a Kaggle challenge (kaggle.com/c/instacart-market-basket-analysis). We first removed users that only made 1 order using the instacart app and then took 5000 users out of the remaining to be part of the data for this tutorial. \n\nFor each order, we have information on the product the user purchased. For example, there is information on the product name, what aisle it is found in, and the department it falls under. To construct features, we extracted indicators representing whether or not a user purchased a product in the given aisles for each order. In total there are 134 aisles. The targets were whether or not a user will buy a product in the breakfast department in the next order. We also used auxiliary targets to train this LSTM. The auxiliary targets were whether or not a user will buy a product in the dairy department in the next order.\n\nWe suspect that a LSTM will be effective for this task, because of the temporal dependencies in the data.","user":"admin","dateUpdated":"2018-04-27T09:02:09+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524819423424_954210398","id":"20180427-085703_34966348","dateCreated":"2018-04-27T08:57:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2590","dateFinished":"2018-04-27T09:02:09+0000","dateStarted":"2018-04-27T09:02:09+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Background</h3>\n<p>In this tutorial we will use a LSTM neural network to predict instacart users' purchasing behavior given a history of their past orders. The data originially comes from a Kaggle challenge (kaggle.com/c/instacart-market-basket-analysis). We first removed users that only made 1 order using the instacart app and then took 5000 users out of the remaining to be part of the data for this tutorial.</p>\n<p>For each order, we have information on the product the user purchased. For example, there is information on the product name, what aisle it is found in, and the department it falls under. To construct features, we extracted indicators representing whether or not a user purchased a product in the given aisles for each order. In total there are 134 aisles. The targets were whether or not a user will buy a product in the breakfast department in the next order. We also used auxiliary targets to train this LSTM. The auxiliary targets were whether or not a user will buy a product in the dairy department in the next order.</p>\n<p>We suspect that a LSTM will be effective for this task, because of the temporal dependencies in the data.</p>\n"}]}},{"text":"%md\n### Imports\n","user":"admin","dateUpdated":"2018-04-27T08:56:53+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524819408700_-1859873706","id":"20180427-085648_929291696","dateCreated":"2018-04-27T08:56:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2513","dateFinished":"2018-04-27T08:56:53+0000","dateStarted":"2018-04-27T08:56:53+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Imports</h3>\n"}]}},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524818370471_406214117","id":"20180427-083930_917505582","dateCreated":"2018-04-27T08:39:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:672","text":"import org.deeplearning4j.nn.api.OptimizationAlgorithm;\nimport org.deeplearning4j.nn.conf.NeuralNetConfiguration;\nimport org.deeplearning4j.nn.conf.Updater;\nimport org.deeplearning4j.nn.conf.layers.GravesLSTM;\nimport org.deeplearning4j.nn.weights.WeightInit;\nimport org.nd4j.linalg.activations.Activation;\nimport org.deeplearning4j.nn.conf.layers.RnnOutputLayer;\nimport org.nd4j.linalg.lossfunctions.LossFunctions.LossFunction;\nimport org.deeplearning4j.nn.conf.GradientNormalization;\nimport org.deeplearning4j.eval.ROC;\nimport org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader;\nimport org.datavec.api.records.reader.SequenceRecordReader;\nimport org.datavec.api.split.NumberedFileInputSplit;\nimport org.deeplearning4j.datasets.datavec.RecordReaderMultiDataSetIterator;\nimport org.nd4j.linalg.dataset.api.iterator.MultiDataSetIterator;\nimport org.deeplearning4j.nn.conf.ComputationGraphConfiguration;\nimport org.deeplearning4j.nn.graph.ComputationGraph;\nimport org.nd4j.linalg.dataset.api.MultiDataSet;\nimport org.nd4j.linalg.api.ndarray.INDArray;\nimport java.io.File;\nimport java.net.URL;\nimport java.io.BufferedInputStream;\nimport java.io.FileInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.FileOutputStream;\nimport org.apache.commons.io.FilenameUtils;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\nimport org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\nimport org.apache.commons.compress.archivers.tar.TarArchiveEntry;","dateUpdated":"2018-04-27T08:43:47+0000","dateFinished":"2018-04-27T08:43:49+0000","dateStarted":"2018-04-27T08:43:47+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.deeplearning4j.nn.api.OptimizationAlgorithm\nimport org.deeplearning4j.nn.conf.NeuralNetConfiguration\nimport org.deeplearning4j.nn.conf.Updater\nimport org.deeplearning4j.nn.conf.layers.GravesLSTM\nimport org.deeplearning4j.nn.weights.WeightInit\nimport org.nd4j.linalg.activations.Activation\nimport org.deeplearning4j.nn.conf.layers.RnnOutputLayer\nimport org.nd4j.linalg.lossfunctions.LossFunctions.LossFunction\nimport org.deeplearning4j.nn.conf.GradientNormalization\nimport org.deeplearning4j.eval.ROC\nimport org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader\nimport org.datavec.api.records.reader.SequenceRecordReader\nimport org.datavec.api.split.NumberedFileInputSplit\nimport org.deeplearning4j.datasets.datavec.RecordReaderMultiDataSetIterator\nimport org.nd4j.linalg.dataset.api.iterator.MultiDataSetIterator\nimport org.deeplearning4j.nn.conf.ComputationGraphConfiguration\nimport org.deeplearning4j.nn.graph.ComputationGraph\nimport org.nd4j.linalg.dataset.api.MultiDataSet\nimport org.nd4j.linalg.api.ndarray.INDArray\nimport java.io.File\nimport java.net.URL\nimport java.io.BufferedInputStream\nimport java.io.FileInputStream\nimport java.io.BufferedOutputStream\nimport java.io.FileOutputStream\nimport org.apache.commons.io.FilenameUtils\nimport org.apache.commons.io.FileUtils\nimport org.apache.commons.compress.archivers.tar.TarArchiveInputStream\nimport org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream\nimport org.apache.commons.compress.archivers.tar.TarArchiveEntry\n"}]}},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524818373560_371602040","id":"20180427-083933_1234393367","dateCreated":"2018-04-27T08:39:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:734","text":"%md \n\n### Download Data","dateUpdated":"2018-04-27T08:42:34+0000","dateFinished":"2018-04-27T08:42:34+0000","dateStarted":"2018-04-27T08:42:34+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Download Data</h3>\n"}]}},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524818545886_-591780202","id":"20180427-084225_1613961353","dateCreated":"2018-04-27T08:42:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1085","text":"%md\nTo download the data, we will create a temporary directory that will store the data files, extract the tar.gz file from the url, and place it in the specified directory.","dateUpdated":"2018-04-27T08:43:00+0000","dateFinished":"2018-04-27T08:43:00+0000","dateStarted":"2018-04-27T08:43:00+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>To download the data, we will create a temporary directory that will store the data files, extract the tar.gz file from the url, and place it in the specified directory.</p>\n"}]}},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524818567808_-2026093453","id":"20180427-084247_2085419306","dateCreated":"2018-04-27T08:42:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1165","text":"val DATA_URL = \"https://bpstore1.blob.core.windows.net/tutorials/instacart.tar.gz\"\nval DATA_PATH = FilenameUtils.concat(System.getProperty(\"java.io.tmpdir\"), \"dl4j_instacart/\")","dateUpdated":"2018-04-27T08:43:58+0000","dateFinished":"2018-04-27T08:43:58+0000","dateStarted":"2018-04-27T08:43:58+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"DATA_URL: String = https://bpstore1.blob.core.windows.net/tutorials/instacart.tar.gz\nDATA_PATH: String = /tmp/dl4j_instacart/\n"}]}},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524818593239_175301835","id":"20180427-084313_1474080225","dateCreated":"2018-04-27T08:43:13+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1248","text":"val directory = new File(DATA_PATH)\ndirectory.mkdir() \n\nval archizePath = DATA_PATH + \"instacart.tar.gz\"\nval archiveFile = new File(archizePath)\nval extractedPath = DATA_PATH + \"instacart\" \nval extractedFile = new File(extractedPath)\n\nFileUtils.copyURLToFile(new URL(DATA_URL), archiveFile) ","dateUpdated":"2018-04-27T08:47:05+0000","dateFinished":"2018-04-27T08:47:05+0000","dateStarted":"2018-04-27T08:47:05+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"directory: java.io.File = /tmp/dl4j_instacart\nres4: Boolean = false\narchizePath: String = /tmp/dl4j_instacart/instacart.tar.gz\narchiveFile: java.io.File = /tmp/dl4j_instacart/instacart.tar.gz\nextractedPath: String = /tmp/dl4j_instacart/instacart\nextractedFile: java.io.File = /tmp/dl4j_instacart/instacart\n"}]}},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524818656453_735773714","id":"20180427-084416_1688783838","dateCreated":"2018-04-27T08:44:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1401","text":"%md\nWe will then extract the data from the tar.gz file, recreate directories within the tar.gz file into our temporary directories, and copy the files from the tar.gz file.","dateUpdated":"2018-04-27T08:47:19+0000","dateFinished":"2018-04-27T08:47:19+0000","dateStarted":"2018-04-27T08:47:19+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>We will then extract the data from the tar.gz file, recreate directories within the tar.gz file into our temporary directories, and copy the files from the tar.gz file.</p>\n"}]}},{"text":"var fileCount = 0\nvar dirCount = 0\nval BUFFER_SIZE = 4096\nval tais = new TarArchiveInputStream(new GzipCompressorInputStream( new BufferedInputStream( new FileInputStream(archizePath))))\n\nvar entry = tais.getNextEntry().asInstanceOf[TarArchiveEntry]\n\nwhile(entry != null){\n    if (entry.isDirectory()) {\n        new File(DATA_PATH + entry.getName()).mkdirs()\n        dirCount = dirCount + 1\n        fileCount = 0\n    }\n    else {\n        \n        val data = new Array[scala.Byte](4 * BUFFER_SIZE)\n\n        val fos = new FileOutputStream(DATA_PATH + entry.getName());\n        val dest = new BufferedOutputStream(fos, BUFFER_SIZE);\n        var count = tais.read(data, 0, BUFFER_SIZE)\n        \n        while (count != -1) {\n            dest.write(data, 0, count)\n            count = tais.read(data, 0, BUFFER_SIZE)\n        }\n        \n        dest.close()\n        fileCount = fileCount + 1\n    }\n    if(fileCount % 1000 == 0){\n        print(\".\")\n    }\n    \n    entry = tais.getNextEntry().asInstanceOf[TarArchiveEntry]\n}","user":"admin","dateUpdated":"2018-04-27T08:47:43+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524818839131_-237581352","id":"20180427-084719_19470875","dateCreated":"2018-04-27T08:47:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1521","dateFinished":"2018-04-27T08:47:45+0000","dateStarted":"2018-04-27T08:47:43+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"fileCount: Int = 0\ndirCount: Int = 0\nBUFFER_SIZE: Int = 4096\ntais: org.apache.commons.compress.archivers.tar.TarArchiveInputStream = org.apache.commons.compress.archivers.tar.TarArchiveInputStream@202693b3\nentry: org.apache.commons.compress.archivers.tar.TarArchiveEntry = org.apache.commons.compress.archivers.tar.TarArchiveEntry@35281714\n..................."}]}},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524818863243_-838528485","id":"20180427-084743_1654181620","dateCreated":"2018-04-27T08:47:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1598","text":"%md\n### DataSetIterators","dateUpdated":"2018-04-27T08:47:56+0000","dateFinished":"2018-04-27T08:47:56+0000","dateStarted":"2018-04-27T08:47:56+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>DataSetIterators</h3>\n"}]}},{"text":"%md\nNext we will convert the raw data (csv files) into DataSetIterators, which will be fed into a neural network. Our training data will have 4000 examples which will be represented by a single DataSetIterator, and the testing data will have 1000 examples which will be represented by a separate DataSetIterator.","user":"admin","dateUpdated":"2018-04-27T09:11:11+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524818876570_-1225970628","id":"20180427-084756_600711638","dateCreated":"2018-04-27T08:47:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1688","dateFinished":"2018-04-27T09:11:11+0000","dateStarted":"2018-04-27T09:11:11+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Next we will convert the raw data (csv files) into DataSetIterators, which will be fed into a neural network. Our training data will have 4000 examples which will be represented by a single DataSetIterator, and the testing data will have 1000 examples which will be represented by a separate DataSetIterator.</p>\n"}]}},{"text":"val path = FilenameUtils.concat(DATA_PATH, \"instacart/\") // set parent directory\n\nval featureBaseDir = FilenameUtils.concat(path, \"features\") // set feature directory\nval targetsBaseDir = FilenameUtils.concat(path, \"breakfast\") // set label directory\nval auxilBaseDir = FilenameUtils.concat(path, \"dairy\") // set futures directory","user":"admin","dateUpdated":"2018-04-27T08:48:56+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524818901671_1989037154","id":"20180427-084821_1455072896","dateCreated":"2018-04-27T08:48:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1771","dateFinished":"2018-04-27T08:48:56+0000","dateStarted":"2018-04-27T08:48:56+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"path: String = /tmp/dl4j_instacart/instacart/\nfeatureBaseDir: String = /tmp/dl4j_instacart/instacart/features\ntargetsBaseDir: String = /tmp/dl4j_instacart/instacart/breakfast\nauxilBaseDir: String = /tmp/dl4j_instacart/instacart/dairy\n"}]}},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524820275313_-1587614336","id":"20180427-091115_1295205739","dateCreated":"2018-04-27T09:11:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3390","text":"%md\n\nWe first initialize CSVSequenceRecordReaders, which will parse the raw data into record-like format. Because we will be using multitask learning, we will use two outputs. Thus we need three RecordReaders in total: one for the input, another for the first target, and the last for the second target. Next, we will need the RecordreaderMultiDataSetIterator, since we now have two outputs. We can add our SequenceRecordReaders using the addSequenceReader methods and specify the input and both outputs. The ALIGN_END alignment mode is used, since the sequences for each example vary in length.\n\nWe will create DataSetIterators for both the training data and the test data.","dateUpdated":"2018-04-27T09:30:49+0000","dateFinished":"2018-04-27T09:30:49+0000","dateStarted":"2018-04-27T09:30:49+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>We first initialize CSVSequenceRecordReaders, which will parse the raw data into record-like format. Because we will be using multitask learning, we will use two outputs. Thus we need three RecordReaders in total: one for the input, another for the first target, and the last for the second target. Next, we will need the RecordreaderMultiDataSetIterator, since we now have two outputs. We can add our SequenceRecordReaders using the addSequenceReader methods and specify the input and both outputs. The ALIGN_END alignment mode is used, since the sequences for each example vary in length.</p>\n<p>We will create DataSetIterators for both the training data and the test data.</p>\n"}]}},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524818936413_-123356901","id":"20180427-084856_1924041114","dateCreated":"2018-04-27T08:48:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1848","text":"val trainFeatures = new CSVSequenceRecordReader(1, \",\");\ntrainFeatures.initialize( new NumberedFileInputSplit(featureBaseDir + \"/%d.csv\", 1, 4000));\n\nval trainBreakfast = new CSVSequenceRecordReader(1, \",\");\ntrainBreakfast.initialize( new NumberedFileInputSplit(targetsBaseDir + \"/%d.csv\", 1, 4000));\n\nval trainDairy = new CSVSequenceRecordReader(1, \",\");\ntrainDairy.initialize(new NumberedFileInputSplit(auxilBaseDir + \"/%d.csv\", 1, 4000));\n\nval train =  new RecordReaderMultiDataSetIterator.Builder(20)\n    .addSequenceReader(\"rr1\", trainFeatures).addInput(\"rr1\")\n    .addSequenceReader(\"rr2\",trainBreakfast).addOutput(\"rr2\")\n    .addSequenceReader(\"rr3\",trainDairy).addOutput(\"rr3\")\n    .sequenceAlignmentMode(RecordReaderMultiDataSetIterator.AlignmentMode.ALIGN_END)\n    .build();","dateUpdated":"2018-04-27T09:03:41+0000","dateFinished":"2018-04-27T09:03:42+0000","dateStarted":"2018-04-27T09:03:41+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"trainFeatures: org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader = org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader@3ae97df\ntrainBreakfast: org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader = org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader@4e96d3fb\ntrainDairy: org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader = org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader@78c403c9\ntrain: org.deeplearning4j.datasets.datavec.RecordReaderMultiDataSetIterator = org.deeplearning4j.datasets.datavec.RecordReaderMultiDataSetIterator@5c1da221\n"}]}},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524819034786_-1305199897","id":"20180427-085034_247955046","dateCreated":"2018-04-27T08:50:34+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1940","text":"val testFeatures = new CSVSequenceRecordReader(1, \",\");\ntestFeatures.initialize( new NumberedFileInputSplit(featureBaseDir + \"/%d.csv\", 4001, 5000));\n\nval testBreakfast = new CSVSequenceRecordReader(1, \",\");\ntestBreakfast.initialize( new NumberedFileInputSplit(targetsBaseDir + \"/%d.csv\", 4001, 5000));\n\nval testDairy = new CSVSequenceRecordReader(1, \",\");\ntestDairy.initialize(new NumberedFileInputSplit(auxilBaseDir + \"/%d.csv\", 4001, 5000));\n\nval test =  new RecordReaderMultiDataSetIterator.Builder(20)\n    .addSequenceReader(\"rr1\", testFeatures).addInput(\"rr1\")\n    .addSequenceReader(\"rr2\",testBreakfast).addOutput(\"rr2\")\n    .addSequenceReader(\"rr3\",testDairy).addOutput(\"rr3\")\n    .sequenceAlignmentMode(RecordReaderMultiDataSetIterator.AlignmentMode.ALIGN_END)\n    .build();","dateUpdated":"2018-04-27T09:03:44+0000","dateFinished":"2018-04-27T09:03:44+0000","dateStarted":"2018-04-27T09:03:44+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"testFeatures: org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader = org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader@5cb6f935\ntestBreakfast: org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader = org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader@32d291d1\ntestDairy: org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader = org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader@7c0a99e\ntest: org.deeplearning4j.datasets.datavec.RecordReaderMultiDataSetIterator = org.deeplearning4j.datasets.datavec.RecordReaderMultiDataSetIterator@1f3c9b62\n"}]}},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524820382786_-1497274442","id":"20180427-091302_1119629475","dateCreated":"2018-04-27T09:13:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3470","text":"%md \n\n### Neural Network","dateUpdated":"2018-04-27T09:14:05+0000","dateFinished":"2018-04-27T09:14:05+0000","dateStarted":"2018-04-27T09:14:05+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Neural Network</h3>\n"}]}},{"text":"%md\nThe next task is to set up the neural network configuration. We see below that the ComputationGraph class is used to create a LSTM with two outputs. We can set the outputs using the setOutputs method of the NeuralNetConfiguraitonBuilder. One GravesLSTM layer and two RnnOutputLayers will be used. We will also set other hyperparameters of the model, such as dropout, weight initialization, updaters, and activation functions.\n","user":"admin","dateUpdated":"2018-04-27T09:32:10+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524820446725_1279766498","id":"20180427-091406_433497358","dateCreated":"2018-04-27T09:14:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3604","dateFinished":"2018-04-27T09:32:10+0000","dateStarted":"2018-04-27T09:32:10+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>The next task is to set up the neural network configuration. We see below that the ComputationGraph class is used to create a LSTM with two outputs. We can set the outputs using the setOutputs method of the NeuralNetConfiguraitonBuilder. One GravesLSTM layer and two RnnOutputLayers will be used. We will also set other hyperparameters of the model, such as dropout, weight initialization, updaters, and activation functions.</p>\n"}]}},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524819174929_-1697812341","id":"20180427-085254_1614475634","dateCreated":"2018-04-27T08:52:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2159","text":" val conf = new NeuralNetConfiguration.Builder()\n    .optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT)\n    .seed(12345)\n    .weightInit(WeightInit.XAVIER)\n    .dropOut(0.25)\n    .graphBuilder()\n    .addInputs(\"input\")\n    .addLayer(\"L1\", new GravesLSTM.Builder()\n        .nIn(134).nOut(150)\n        .updater(Updater.ADAM)\n        .gradientNormalization(GradientNormalization.ClipElementWiseAbsoluteValue)\n        .gradientNormalizationThreshold(10)\n        .activation(Activation.TANH)\n        .build(), \"input\")\n    .addLayer(\"out1\", new RnnOutputLayer.Builder(LossFunction.XENT)\n        .updater(Updater.ADAM)\n        .gradientNormalization(GradientNormalization.ClipElementWiseAbsoluteValue)\n        .gradientNormalizationThreshold(10)\n        .activation(Activation.SIGMOID)\n        .nIn(150).nOut(1).build(), \"L1\")\n    .addLayer(\"out2\", new RnnOutputLayer.Builder(LossFunction.XENT)\n        .updater(Updater.ADAM)\n        .gradientNormalization(GradientNormalization.ClipElementWiseAbsoluteValue)\n        .gradientNormalizationThreshold(10)\n        .activation(Activation.SIGMOID)\n        .nIn(150).nOut(1).build(), \"L1\")\n    .setOutputs(\"out1\",\"out2\")\n    .pretrain(false).backprop(true)\n    .build();","dateUpdated":"2018-04-27T08:54:16+0000","dateFinished":"2018-04-27T08:54:18+0000","dateStarted":"2018-04-27T08:54:16+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"warning: there were 3 deprecation warning(s); re-run with -deprecation for details\nconf: org.deeplearning4j.nn.conf.ComputationGraphConfiguration = \n{\n  \"backprop\" : true,\n  \"backpropType\" : \"Standard\",\n  \"cacheMode\" : \"NONE\",\n  \"defaultConfiguration\" : {\n    \"cacheMode\" : \"NONE\",\n    \"epochCount\" : 0,\n    \"iterationCount\" : 0,\n    \"l1ByParam\" : { },\n    \"l2ByParam\" : { },\n    \"layer\" : null,\n    \"maxNumLineSearchIterations\" : 5,\n    \"miniBatch\" : true,\n    \"minimize\" : true,\n    \"optimizationAlgo\" : \"STOCHASTIC_GRADIENT_DESCENT\",\n    \"pretrain\" : false,\n    \"seed\" : 12345,\n    \"stepFunction\" : null,\n    \"variables\" : [ ]\n  },\n  \"epochCount\" : 0,\n  \"inferenceWorkspaceMode\" : \"SEPARATE\",\n  \"iterationCount\" : 0,\n  \"networkInputs\" : [ \"input\" ],\n  \"networkOutputs\" : [ \"out1\", \"out2\" ],\n  \"pretrain\" : false,\n  \"tbpttBackLength\" : 20,\n  \"tbpttFwdLength\" : 20,\n  \"trainingWo..."}]}},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524820531306_845693118","id":"20180427-091531_1654516559","dateCreated":"2018-04-27T09:15:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3690","text":"%md\n\nWe must then initialize the neural network.","dateUpdated":"2018-04-27T09:15:57+0000","dateFinished":"2018-04-27T09:15:57+0000","dateStarted":"2018-04-27T09:15:57+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>We must then initialize the neural network.</p>\n"}]}},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524819256836_26186184","id":"20180427-085416_2130664426","dateCreated":"2018-04-27T08:54:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2243","text":"val net = new ComputationGraph(conf);\nnet.init();","dateUpdated":"2018-04-27T08:54:48+0000","dateFinished":"2018-04-27T08:54:49+0000","dateStarted":"2018-04-27T08:54:48+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"net: org.deeplearning4j.nn.graph.ComputationGraph = org.deeplearning4j.nn.graph.ComputationGraph@61b984a0\n"}]}},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524820569011_-435258564","id":"20180427-091609_209488885","dateCreated":"2018-04-27T09:16:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3776","text":"%md\n\n### Model Training","dateUpdated":"2018-04-27T09:16:11+0000","dateFinished":"2018-04-27T09:16:11+0000","dateStarted":"2018-04-27T09:16:11+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Model Training</h3>\n"}]}},{"text":"%md\nTo train the model, we use 5 epochs with a for loop and simply call the fit method of the ComputationGraph.","user":"admin","dateUpdated":"2018-04-27T09:16:27+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524820572433_1299958976","id":"20180427-091612_690496444","dateCreated":"2018-04-27T09:16:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3853","dateFinished":"2018-04-27T09:16:27+0000","dateStarted":"2018-04-27T09:16:27+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>To train the model, we use 5 epochs with a for loop and simply call the fit method of the ComputationGraph.</p>\n"}]}},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524819288318_910769877","id":"20180427-085448_34088845","dateCreated":"2018-04-27T08:54:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2333","text":"for( epoch <- 1 to 5){\n    println(\"Epoch \"+ epoch);\n    net.fit( train );\n    train.reset();\n}","dateUpdated":"2018-04-27T08:55:23+0000","dateFinished":"2018-04-27T08:58:34+0000","dateStarted":"2018-04-27T08:55:23+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Epoch 1\nEpoch 2\nEpoch 3\nEpoch 4\nEpoch 5\n"}]}},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524820600813_-1375923652","id":"20180427-091640_1250025060","dateCreated":"2018-04-27T09:16:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3936","text":"%md\n### Model Evaluation","dateUpdated":"2018-04-27T09:16:43+0000","dateFinished":"2018-04-27T09:16:43+0000","dateStarted":"2018-04-27T09:16:43+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Model Evaluation</h3>\n"}]}},{"text":"%md\nWe will now evaluate our trained model on the original task, which was predicting whether or not a user will purchase a product in the breakfast department. Note that we will use the area under the curve (AUC) metric of the ROC curve.  ","user":"admin","dateUpdated":"2018-04-27T09:20:21+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524820817964_1112153896","id":"20180427-092017_454140891","dateCreated":"2018-04-27T09:20:17+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4187","dateFinished":"2018-04-27T09:20:21+0000","dateStarted":"2018-04-27T09:20:21+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>We will now evaluate our trained model on the original task, which was predicting whether or not a user will purchase a product in the breakfast department. Note that we will use the area under the curve (AUC) metric of the ROC curve.</p>\n"}]}},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524819323767_288640773","id":"20180427-085523_840659","dateCreated":"2018-04-27T08:55:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2417","text":" // Evaluate model\n\nval roc = new ROC();\n\ntest.reset();\n\nwhile(test.hasNext()){\n    val next = test.next();\n    val features =  next.getFeatures();\n    val output = net.output(features(0));\n    for(i <- 0 to output.size-1)\n    roc.evalTimeSeries(next.getLabels()(i), output(i));\n}\n\nprintln(roc.calculateAUC());","dateUpdated":"2018-04-27T09:29:57+0000","dateFinished":"2018-04-27T09:30:10+0000","dateStarted":"2018-04-27T09:29:57+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"roc: org.deeplearning4j.eval.ROC = ROC(thresholdSteps=0, countActualPositive=0, countActualNegative=0, counts={}, auc=NaN, auprc=NaN, isExact=true, exampleCount=0, rocRemoveRedundantPts=true)\n0.7996330278922686\n"}]}},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524821309055_691712004","id":"20180427-092829_1280525034","dateCreated":"2018-04-27T09:28:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5089","text":"%md\n\nWe achieve a AUC of 0.80!","dateUpdated":"2018-04-27T09:30:20+0000","dateFinished":"2018-04-27T09:30:20+0000","dateStarted":"2018-04-27T09:30:20+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>We achieve a AUC of 0.80!</p>\n"}]}},{"text":"%md\n","user":"admin","dateUpdated":"2018-04-27T09:30:20+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524821420037_994073210","id":"20180427-093020_2025344795","dateCreated":"2018-04-27T09:30:20+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5334"}],"name":"Instacart","id":"2DEJE1CSA","angularObjects":{"2DC7YKD4V:existing_process":[],"2DC9FA8QD:existing_process":[],"2DBX9FNXR:existing_process":[],"2DBQV2CX2:existing_process":[],"2DBQHA1Q1:existing_process":[],"2DBCV9QQ7:existing_process":[],"2DEB7HH8U:existing_process":[],"2DBR6EZWA:existing_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}