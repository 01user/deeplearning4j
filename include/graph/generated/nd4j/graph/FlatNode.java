// automatically generated by the FlatBuffers compiler, do not modify

package nd4j.graph;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FlatNode extends Table {
  public static FlatNode getRootAsFlatNode(ByteBuffer _bb) { return getRootAsFlatNode(_bb, new FlatNode()); }
  public static FlatNode getRootAsFlatNode(ByteBuffer _bb, FlatNode obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public FlatNode __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int id() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public byte opType() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public short opNum() { int o = __offset(8); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public int input(int j) { int o = __offset(10); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int inputLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer inputAsByteBuffer() { return __vector_as_bytebuffer(10, 4); }
  public byte dataType() { int o = __offset(12); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public int output(int j) { int o = __offset(14); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int outputLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer outputAsByteBuffer() { return __vector_as_bytebuffer(14, 4); }

  public static int createFlatNode(FlatBufferBuilder builder,
      int id,
      byte opType,
      short opNum,
      int inputOffset,
      byte dataType,
      int outputOffset) {
    builder.startObject(6);
    FlatNode.addOutput(builder, outputOffset);
    FlatNode.addInput(builder, inputOffset);
    FlatNode.addId(builder, id);
    FlatNode.addOpNum(builder, opNum);
    FlatNode.addDataType(builder, dataType);
    FlatNode.addOpType(builder, opType);
    return FlatNode.endFlatNode(builder);
  }

  public static void startFlatNode(FlatBufferBuilder builder) { builder.startObject(6); }
  public static void addId(FlatBufferBuilder builder, int id) { builder.addInt(0, id, 0); }
  public static void addOpType(FlatBufferBuilder builder, byte opType) { builder.addByte(1, opType, 0); }
  public static void addOpNum(FlatBufferBuilder builder, short opNum) { builder.addShort(2, opNum, 0); }
  public static void addInput(FlatBufferBuilder builder, int inputOffset) { builder.addOffset(3, inputOffset, 0); }
  public static int createInputVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startInputVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDataType(FlatBufferBuilder builder, byte dataType) { builder.addByte(4, dataType, 0); }
  public static void addOutput(FlatBufferBuilder builder, int outputOffset) { builder.addOffset(5, outputOffset, 0); }
  public static int createOutputVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startOutputVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endFlatNode(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishFlatNodeBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
}

