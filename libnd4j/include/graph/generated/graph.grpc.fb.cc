// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: graph

#include "graph_generated.h"
#include "graph.grpc.fb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace nd4j {
namespace graph {

static const char* GraphInferenceServer_method_names[] = {
  "/nd4j.graph.GraphInferenceServer/RegisterGraph",
  "/nd4j.graph.GraphInferenceServer/ForgetGraph",
  "/nd4j.graph.GraphInferenceServer/InferenceRequest",
};

std::unique_ptr< GraphInferenceServer::Stub> GraphInferenceServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< GraphInferenceServer::Stub> stub(new GraphInferenceServer::Stub(channel));
  return stub;
}

GraphInferenceServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel)  , rpcmethod_RegisterGraph_(GraphInferenceServer_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ForgetGraph_(GraphInferenceServer_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InferenceRequest_(GraphInferenceServer_method_names[2], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  {}
  
::grpc::Status GraphInferenceServer::Stub::RegisterGraph(::grpc::ClientContext* context, const flatbuffers::grpc::Message<FlatGraph>& request, flatbuffers::grpc::Message<FlatResponse>* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterGraph_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<FlatResponse>>* GraphInferenceServer::Stub::AsyncRegisterGraphRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<FlatGraph>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<FlatResponse>>::Create(channel_.get(), cq, rpcmethod_RegisterGraph_, context, request);
}

::grpc::Status GraphInferenceServer::Stub::ForgetGraph(::grpc::ClientContext* context, const flatbuffers::grpc::Message<FlatDropRequest>& request, flatbuffers::grpc::Message<FlatResponse>* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ForgetGraph_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<FlatResponse>>* GraphInferenceServer::Stub::AsyncForgetGraphRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<FlatDropRequest>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<FlatResponse>>::Create(channel_.get(), cq, rpcmethod_ForgetGraph_, context, request);
}

::grpc::ClientReader< flatbuffers::grpc::Message<FlatResponse>>* GraphInferenceServer::Stub::InferenceRequestRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<FlatInferenceRequest>& request) {
  return new ::grpc::ClientReader< flatbuffers::grpc::Message<FlatResponse>>(channel_.get(), rpcmethod_InferenceRequest_, context, request);
}

::grpc::ClientAsyncReader< flatbuffers::grpc::Message<FlatResponse>>* GraphInferenceServer::Stub::AsyncInferenceRequestRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<FlatInferenceRequest>& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReader< flatbuffers::grpc::Message<FlatResponse>>::Create(channel_.get(), cq, rpcmethod_InferenceRequest_, context, request, tag);
}

GraphInferenceServer::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      GraphInferenceServer_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GraphInferenceServer::Service, flatbuffers::grpc::Message<FlatGraph>, flatbuffers::grpc::Message<FlatResponse>>(
          std::mem_fn(&GraphInferenceServer::Service::RegisterGraph), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      GraphInferenceServer_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GraphInferenceServer::Service, flatbuffers::grpc::Message<FlatDropRequest>, flatbuffers::grpc::Message<FlatResponse>>(
          std::mem_fn(&GraphInferenceServer::Service::ForgetGraph), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      GraphInferenceServer_method_names[2],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< GraphInferenceServer::Service, flatbuffers::grpc::Message<FlatInferenceRequest>, flatbuffers::grpc::Message<FlatResponse>>(
          std::mem_fn(&GraphInferenceServer::Service::InferenceRequest), this)));
}

GraphInferenceServer::Service::~Service() {
}

::grpc::Status GraphInferenceServer::Service::RegisterGraph(::grpc::ServerContext* context, const flatbuffers::grpc::Message<FlatGraph>* request, flatbuffers::grpc::Message<FlatResponse>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GraphInferenceServer::Service::ForgetGraph(::grpc::ServerContext* context, const flatbuffers::grpc::Message<FlatDropRequest>* request, flatbuffers::grpc::Message<FlatResponse>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GraphInferenceServer::Service::InferenceRequest(::grpc::ServerContext* context, const flatbuffers::grpc::Message<FlatInferenceRequest>* request, ::grpc::ServerWriter< flatbuffers::grpc::Message<FlatResponse>>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace nd4j
}  // namespace graph

