// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SERVER_ND4J_GRAPH_H_
#define FLATBUFFERS_GENERATED_SERVER_ND4J_GRAPH_H_

#include "flatbuffers/flatbuffers.h"

#include "array_generated.h"
#include "config_generated.h"
#include "graph_generated.h"
#include "node_generated.h"
#include "properties_generated.h"
#include "utils_generated.h"
#include "variable_generated.h"

namespace nd4j {
namespace graph {

struct FlatInferenceRequest;

struct FlatResponse;

struct FlatInferenceRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_VARIABLES = 6
  };
  int64_t id() const {
    return GetField<int64_t>(VT_ID, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<nd4j::graph::FlatVariable>> *variables() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<nd4j::graph::FlatVariable>> *>(VT_VARIABLES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_VARIABLES) &&
           verifier.Verify(variables()) &&
           verifier.VerifyVectorOfTables(variables()) &&
           verifier.EndTable();
  }
};

struct FlatInferenceRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int64_t id) {
    fbb_.AddElement<int64_t>(FlatInferenceRequest::VT_ID, id, 0);
  }
  void add_variables(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<nd4j::graph::FlatVariable>>> variables) {
    fbb_.AddOffset(FlatInferenceRequest::VT_VARIABLES, variables);
  }
  FlatInferenceRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FlatInferenceRequestBuilder &operator=(const FlatInferenceRequestBuilder &);
  flatbuffers::Offset<FlatInferenceRequest> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<FlatInferenceRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<FlatInferenceRequest> CreateFlatInferenceRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t id = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<nd4j::graph::FlatVariable>>> variables = 0) {
  FlatInferenceRequestBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_variables(variables);
  return builder_.Finish();
}

inline flatbuffers::Offset<FlatInferenceRequest> CreateFlatInferenceRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t id = 0,
    const std::vector<flatbuffers::Offset<nd4j::graph::FlatVariable>> *variables = nullptr) {
  return nd4j::graph::CreateFlatInferenceRequest(
      _fbb,
      id,
      variables ? _fbb.CreateVector<flatbuffers::Offset<nd4j::graph::FlatVariable>>(*variables) : 0);
}

struct FlatResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_STATUS = 4
  };
  int32_t status() const {
    return GetField<int32_t>(VT_STATUS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_STATUS) &&
           verifier.EndTable();
  }
};

struct FlatResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_status(int32_t status) {
    fbb_.AddElement<int32_t>(FlatResponse::VT_STATUS, status, 0);
  }
  FlatResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FlatResponseBuilder &operator=(const FlatResponseBuilder &);
  flatbuffers::Offset<FlatResponse> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<FlatResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<FlatResponse> CreateFlatResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t status = 0) {
  FlatResponseBuilder builder_(_fbb);
  builder_.add_status(status);
  return builder_.Finish();
}

inline const nd4j::graph::FlatGraph *GetFlatGraph(const void *buf) {
  return flatbuffers::GetRoot<nd4j::graph::FlatGraph>(buf);
}

inline bool VerifyFlatGraphBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<nd4j::graph::FlatGraph>(nullptr);
}

inline void FinishFlatGraphBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<nd4j::graph::FlatGraph> root) {
  fbb.Finish(root);
}

}  // namespace graph
}  // namespace nd4j

#endif  // FLATBUFFERS_GENERATED_SERVER_ND4J_GRAPH_H_
